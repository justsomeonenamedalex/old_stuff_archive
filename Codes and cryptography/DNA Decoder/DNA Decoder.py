# A and T = 0, C and G = 1


# define variables

ASCII_code = {'32': ' ', '33': '!', '34': '"', '35': '#', '36': '$', '37': '%', '38': '&', '39': "'",
              '40': '(', '41': ')', '42': '*', '43': '+', '44': ',', '45': '-', '46': '.', '47': '/',
              '48': '0', '49': '1', '50': '2', '51': '3', '52': '4', '53': '5', '54': '6', '55': '7',
              '56': '8', '57': '9', '58': ':', '59': ';', '60': '<', '61': '=', '62': '>', '63': '?',
              '64': '@', '65': 'A', '66': 'B', '67': 'C', '68': 'D', '69': 'E', '70': 'F', '71': 'G',
              '72': 'H', '73': 'I', '74': 'J', '75': 'K', '76': 'L', '77': 'M', '78': 'N', '79': 'O',
              '80': 'P', '81': 'Q', '82': 'R', '83': 'S', '84': 'T', '85': 'U', '86': 'V', '87': 'W',
              '88': 'X', '89': 'Y', '90': 'Z', '91': '[', '92': '\\', '93': ']', '94': '^', '95': '_',
              '96': '`', '97': 'a', '98': 'b', '99': 'c', '100': 'd', '101': 'e', '102': 'f', '103': 'g',
              '104': 'h', '105': 'i', '106': 'j', '107': 'k', '108': 'l', '109': 'm', '110': 'n', '111': 'o',
              '112': 'p', '113': 'q', '114': 'r', '115': 's', '116': 't', '117': 'u', '118': 'v', '119': 'w',
              '120': 'x', '121': 'y', '122': 'z', '123': '{', '124': '|', '125': '}', '126': '~'}

text_binary = []
eight_bit_phrases = []
#take input
start_text_list = list(input().lower())
temp_eight_bit_list = []
eight_bit = []
binary = []
Final_list = []
# functions
def split():
    for i in range(0,len(text_binary), 8):
        yield text_binary[i:i +8]



#convert to binary
start_text_length = len(start_text_list)
for i in range(0,start_text_length):
    if start_text_list[i] == "a" or start_text_list[i] == "t":
        text_binary.append("0")
    else:
        text_binary.append("1")

# seperate into 8-bit

eight_bit_temp = list(split())
print(eight_bit_temp)
for i in range(0,len(eight_bit_temp)):
    temp_eight_bit_list=[]
    eight_bit_temp_list = list(eight_bit_temp[i])
    for n in range(0,len(eight_bit_temp_list)):
        if eight_bit_temp_list[n] == "0" or eight_bit_temp_list[n] == "1":
            temp_eight_bit_list.append(eight_bit_temp_list[n])
    eightbit_joined = ''.join(temp_eight_bit_list)
    eight_bit.append(eightbit_joined)

# binary to decimal
for i in range(0,len(eight_bit)):
  temp_binary=int(eight_bit[i],2)
  binary.append(temp_binary)
print(binary)

# decimal to ascii

for i in range(0,len(binary)):
  binarykey = str(binary[i])
  temp_ascii = ASCII_code[binarykey]
  Final_list.append(temp_ascii)

# combine text
End_text = ''.join(Final_list)

# prints result
print(End_text)


#poem:

# TCTTGCAGACGCGTAGTTGTAAAATCCTAAGATCCTCCGGTGGATGATACCGGTAGATGTAATTAGGACTAGTCCCATGCATGATAATTGGATAAGATGTTTTTACCCATTAACCGTACATGGAGAAGTCCGATGGACGAGCCGTCGACCCATAGTATATTCCAAGGATGCTGCGGTCGCTTGTATGATAATTGCTCCTGTGCCCATGAACTTAAAACCTCCTGAGCACAAGTGCACGGATGGATCAATTCGGTCGATCATTATACTTTTAGAAGATTATTCCTTTCGTGCAAATGTCGAACCGTCCTTCTGAAGAAAATAGCAGGCCACCATCGTTTCTTAATTGCAATGATCCTCGCCTCCTCGCTAGGTAGACAAGTATTATGGTATTGAGGTGGGAACCTTGAATTCTTATTTCCGATGCTCGTCTTCTCGAGGCTTGGTACTCTGCGACCCTTGATATAAGGTTGGAACCTGCCCAGGGTACAATCATAAATGGTCGAGACCGCATCATCAATATACCGAAGCACGTGCGGAGCGTGTCTCGTGGTAATCTGCCATAGAATTATCTCACATTCGTGTAATGCTGATCACCCTACGTACTTAATACCTTCATACGTGGCGTGGGTGAGTGCATTCTACCAGGAAAGCTACTGAACTCGTGTGGACAATAGGAACTGTGCTGCAAAGGTGAACACCCCAATAAGTTATAACCACTTGTCGCAAGGTACAAATTTCGATTTGAAGTTAAATCCTTTCCTGCTCTTTTCCTATAGAGGAGATGACGTGCCAAACTATTTACGGAGAAACCACATAAGCAATTGTCGCTCATTACAATATAGCAATGTTGCTCTACTGCAGGCTAGCTTGATACCCAACCAACTATATTGATGCAGTCCCCTACATCATAATAGGGTCGCTGCACAAGTCCACCATTCGTGCTATTCACCTATAGAAATATCGAACGAACCACCCCACGGTACTAGGAAAGCACGTCAACAGCACGCATGGATGCGAACTATTTAGCACCAGACGTACTCTAGATTTTTGCCAGTGTGCTCCCTAGCATGATTGCTTGTCAGGGATCAATCATTAAACCAGAAGAGGGACTATCGCAAGCTACTAAAATGGATAGCACCTCCCCTCCAGCGAACCCTGAATGGGAAGTTGCTGCCGAGGTGGATAACAGCCA

# ATGATTAAAGAACAACTAGAAAAATCCTCCTTTCCTCTTGACGCTCCATCCTAGACATGAATAATGCTCTTCAGGTCGCAATGAAATATCGTTCGAACCTCGATAGCTTCTGACGGTTGGACCAGTTATAGACGTTATCTATATTGCTCAACACCTCGCTATCTTATAACGCTAGGTGCCAGACAGCTTCCTTGGAAGGATGGTTGAGTGGCTTGATCGACTACTCGACCCTAGCAAGGGAAGAAAAATGCTAAAGTCCACGCAAGCTTGATTAGATTTATGGCTCATTGGACGCCTGCTGTTGTGGAGGTAAACTGGATTAGTAATATCTTAGATTGCCATCAAGGTTGAGTCGTATAGACGTCGACTCGTCTAGTCGTGCCTTGGATGGGATCTTAAATGCACGCCAGCATGCTAAGTTTAATCCTGTATTGGACAACACGTAGCCTGCTGTTTAGCAAGACTGCCAAGTAAGTTATTTCCCTCATTCCACTATTCCTGAACTGGAGGGATCCAAGCCAGGGAACGTAGTCCATTTGTTTATTCGGGATCAGGTAGTCTGGATATGTGCCTACTAGCTGGCTTGCTCAACACGACGGATCGTTGCGATGTTATAACGCTCTAACCTGCGGTACTATATAGCAAGGAACGAGGTTTCCCGTAGAACCCTGCATGATATTTCACTGTAACGACGGGATCATTATTCCGACGCAGGCATCTAGGAACTCTGCACCGATCCATTCCACGTGTTAATCTTATTACCTGCACTGCGGTACTTGAAAAATGCGTTCCAGGGAAATACGACTTGTGCGTACATCCAGATGACCCTGTATACTTATAAGGATGCAAGGCTAGTTGCACCGGAGGAGGACTTCTATAAAGGGTCAAACGAGTTATGCTGAAGACGCATCCTTGTTAATAGCACCACAGCTGGGCTCGGAAGTTGCGTGTATGGATATCAGCACCATTTGATTTAAGCATTCCTCGTCGGCTCCACTACAGCTGCTAAAGTAATTTGTAATTGACCACCCATCCTTGTTAACAATTAACCGTTCCAGGTGCGCACGTTATCAGCGAAGTAAGTGCATTACAATTAACGGTGTCAGCTGCCATGGATCGTTGCTAGTCTCGGACTTTCCGTGTATGCTAGTGTGGGTTGTTCCATCTCTCCTTCTTAAGTCCTTTACAAATTACGTCATGAGGAGCCTACCGACATTCCAGCCGTTCAATTTTCGAGGGCAGGGATATACGAAGTCTGCACCCATAGAATATTCCCTACGACGTCTCGACGGCTACAAGACCCA

# TGAGTACCTCCTCGCGATCTATTAAGAAGTTCTAGTATATTCCGTCGCACGTGAACACGTCCAAAGCTCGTTATCTATAAAGCGAACGTCGGTTTTAGGAGCAATCCTGAAGAGCGTCTTTACATAAATCCGTCAATCCTCTTTAGCAGTTGACCCTACGTAGAAAATAGCTGTTTTGGAACTGACCAGCTATCCACATCACCGCTTAATCTATTAACCTAATGTCGGAGTTTTCTTTAAAGGTGTTGACGGACTATCGGATCGAAGAAAAAAGGTTTGCACGACCCCAGGGAAGAAGCATCAGATGGCAGCATCAAAAAAGTTTCTATGCAAGAGACGGTAGCACCCACTTTCCGTAGTTCCAGGGCAGGCCATGTACTTTAAACGGTGATTCGAGATTTGGTTGTGTTGATTTAAGGAAGGCAGCTACAGACGTCCCAAGCTTCTCAGGCTTGCATGTATATTCCGTCAATGCTGAATTCCATTAGTGCGACAAATGTATTTAGCTACCATGCACCCGACGGTTGATCCACGTGTGGAAGTCAGCATCAAATGATTAAACGGAGTTTGCAGATATCCTGTTCACGCATCGAAGAATATAGCTATTCACCTCGGATCGATTCCAGCACATCAGCATGAGACCTCCGATCCGACAATTCTAAATAGGATACGACGAAAAGTCCTTCGGTGGTTGACATCTGCCTTAGAAATTTCTCAACAAGGAAGAGACCAATCTACCCACAGTCGACTTGACGTCGATTCGATCAATTGTTTTTAGCGAGATAGCTCTATACGTCTACACGCTAGGTAGTATATTGCATTCTTGGACCGCTGCTAGAATCCGCTTGATCAAATTTCCTGATCTGCTCGCAAGCGACATTCCAGGGGATCTTTATAGCGATGCTGGTGGGGTCGACCTCACGATCACTCCGAGTAACCACATTTCGTCAACTGCTCGCATCCATCGGATGTTTTTTCGTGCAGTCGAGCGGACGCAAGTACCAAGTCAAGTTTATAGACTCTAACCACATATCGAAAACAGCTCGCTAAGTATTAACCATGCATCCACGAATGGTTGTCAGGCTTGCAGGTGTAATTGATTTAAGGAAATCAGGTCGCAACCTAGTTTTGTATTTTCCATAGAAGGTCGTTTCGTGCCCACCTCGCCTGGAACATTTGATATTTCCTAAAGACGAGCCAAGCTACTATAGAAAATACCAGGAGACGTCAACAGGCAAGGTGGTAGAGTGGCTACAACCGCTTGTACAAATAACGAAATGAGCAGGGTTGCATCAAAAGTATATAGGCTTGTAGGATTACTGCAAGGCTCCAAGACAAGACGCA

# ACATATACTGCACGCAACGTACATTACATATAACGCGTACTGCATGTGACGCACATTACACGTAATGTATATTGCGTGTAACGTGTATTGCATGTGATGTATATTGCACGTAACGTATACTGCGTGCGACGCATGCTACATATAACGTGCGCTGCATGCAATGTATATTGCGTATAACGTGTATTGCGCATGACGCATGCTGCACATGACGTATGCTGCGTACGATGTATATTGCACGTGACGTATACTGCGCATGATGTATATTGCGTATAACGCATGTTGCACGCGACGCACGTTGCATGTGATGTATATTGCGTACAACGTGTACTGCATGCGACGTGTATTGCGTGTAATGCGTGCTACATATAACATACATTGCATATGACGCATGTTGCACACGATGTATATTGCACGTGACGTATACTGCGTGTAACGCACATTGCATGTGACGCATGTTACATATAACGTATGCTGCATATGACGTGCGTTGCACGCAACGTGCGCTGCGTGTAATGTATATTGCGTGTAACGCATGTTGCATATGACGTGCGTTGCGTACGACGTACGTTGCACGCGACGCATGTTGCACGTGATGTATATTGCACATGACGTGCGTTGCGTGTAACGTGCGCTACATATAACGTGCATTGCACATGACGTACGCTGCACATAACGCACATTACACGCA
















